#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2020 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
name: build-lede-k3

on:
  push:
    branches: 
      - main
  pull_request:
    branches: [ main ]
  # schedule:
  #   - cron: 0 20 * * *
  #release:
  #  types: [published]OpenWrt-CI
    
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
#  FEEDS_CONF: feeds.conf.default
#  CONFIG_FILE: .config
#  DIY_P1_SH: diy-part1.sh
#  DIY_P2_SH: diy-part2.sh
#  SSH_ACTIONS: false
#  UPLOAD_BIN_DIR: false
#  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  UPLOAD_ARTIFACT: false
  SSH_ACTIONS: false
  KERNEL_TEST: false
  KERNEL_OP_TEST: false
  KERNEL_SCREEN: false
  ONLY_K3: false
  FILETARNAME: lede-k3.tar.gz
  TZ: Asia/Shanghai

jobs:

  build:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    #if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
        
      - name: Clone source code
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH lede
          git submodule update --init --recursive
          git submodule foreach git checkout master
          ls -lh zmjjcg
          # sudo mkdir -p -m 777 /mnt/openwrt/bin /mnt/openwrt/build_dir/host /mnt/openwrt/build_dir/hostpkg /mnt/openwrt/dl /mnt/openwrt/feeds /mnt/openwrt/staging_dir
          # ln -s /mnt/openwrt/bin ./bin
          # mkdir -p ./build_dir
          # ln -s -f /mnt/openwrt/build_dir/host ./build_dir/host
          # ln -s -f /mnt/openwrt/build_dir/hostpkg ./build_dir/hostpkg
          # ln -s /mnt/openwrt/dl ./dl
          # ln -s /mnt/openwrt/feeds ./feeds
          # ln -s /mnt/openwrt/staging_dir ./staging_dir
          ls -l
          df -h
          
      - name: KERNEL_SCREEN
        if: env.KERNEL_SCREEN == 'true'
        run: |
          cd lede
          git checkout 937f01b
        
        
      - name: Update feeds
        run: |
          cd lede
          ./scripts/feeds update -a
          #./scripts/feeds install -a
          ls -l
          
      - name: kernel test
        if: env.KERNEL_TEST == 'true'
        run: |
          git clone https://github.com/openwrt/openwrt
          #cp -rf ./openwrt/target/linux/bcm53xx/config-5.10 ./lede/target/linux/bcm53xx/
          #sed -i 's#ioremap_nocache#ioremap#g' ./lede/target/linux/generic/hack-5.10/773-bgmac-add-srab-switch.patch
          cp -rf ./openwrt/target/linux/generic/hack-5.10/*add-srab-switch.patch ./lede/target/linux/generic/hack-5.10/
          #sed -i 's#DEVICE_VENDOR := PHICOMM#\nDEVICE_DTS := bcm47094-phicomm-k3\n  DEVICE_VENDOR := PHICOMM#g' ./lede/target/linux/bcm53xx/image/Makefile
          
          #rm -rf ./lede/target/linux/bcm53xx/patches-5.10/*
          #cp -rn ./openwrt/target/linux/bcm53xx/patches-5.10/* ./lede/target/linux/bcm53xx/patches-5.10/
          
          #cp -rf ./openwrt/target/linux/bcm53xx/patches-5.10/304-ARM-dts-BCM5301X-Specify-switch-ports-for-remaining-.patch ./lede/target/linux/bcm53xx/patches-5.10/
          #cp -rn ./openwrt/target/linux/generic/backport-5.10/* ./lede/target/linux/generic/backport-5.10/
          #cp -rn ./openwrt/target/linux/generic/hack-5.10/* ./lede/target/linux/generic/hack-5.10/
          #cp -rn ./openwrt/target/linux/generic/pending-5.10/* ./lede/target/linux/generic/pending-5.10/
          cd lede
          #sed -i 's#KERNEL_PATCHVER:=5.4#KERNEL_PATCHVER:=5.10#g' ./target/linux/bcm53xx/Makefile
          sed -i 's#=5.4#=5.10#g' ./target/linux/bcm53xx/Makefile
          #sed -i 's/TARGET_DEVICES/#TARGET_DEVICES/g' ./target/linux/bcm53xx/image/Makefile
          #sed -i 's/#TARGET_DEVICES += phicomm_k3/TARGET_DEVICES += phicomm_k3/g' ./target/linux/bcm53xx/image/Makefile
          #cat ./target/linux/bcm53xx/Makefile
          ./scripts/feeds update -a
          #./scripts/feeds install -a
          ls -l

      - name: kernel op test
        if: env.KERNEL_OP_TEST == 'true'
        run: |
          git clone https://github.com/openwrt/openwrt
          cp -rf ./lede/package/lean ./openwrt/package/
          cp -rf ./lede/tools/ucl ./openwrt/tools/
          cp -rf ./lede/tools/upx ./openwrt/tools/
          cp -rf ./lede/target/linux/generic/hack-5.10/95* ./openwrt/target/linux/generic/hack-5.10/
          cp -rf ./lede/target/linux/generic/hack-5.10/99* ./openwrt/target/linux/generic/hack-5.10/
          cp -rf ./lede/target/linux/generic/hack-5.10/601* ./openwrt/target/linux/generic/hack-5.10/
          #cp -rf ./openwrt/target/linux/bcm53xx/config-5.10 ./lede/target/linux/bcm53xx/
          mv lede baklede
          mv openwrt lede
          #sed -i 's/.*-sfe/#/g' ./config-k3
          #sed -i 's/.*shortcut-fe/#/g' ./config-k3
          #cat config-k3 |grep sfe
          #cat config-k3 |grep short
          #rm ./lede/target/linux/bcm53xx/patches-5.10/*
          #cp ./openwrt/target/linux/bcm53xx/patches-5.10/* ./lede/target/linux/bcm53xx/patches-5.10/
          #cp ./openwrt/target/linux/generic/backport-5.10/*v5.13* ./lede/target/linux/generic/backport-5.10/
          #cp ./openwrt/target/linux/bcm53xx/config-5.10 ./lede/target/linux/bcm53xx/
          
          ##rm ./lede/target/linux/generic/pending-5.10/110*
          cd lede
          sed -i 's#KERNEL_PATCHVER:=5.4#KERNEL_PATCHVER:=5.10#g' ./target/linux/bcm53xx/Makefile
          sed -i 's#zlib zstd#zlib zstd ucl upx#g' ./tools/Makefile
          sed -i 's#$(curdir)/bison/compile := $(curdir)/flex/compile#$(curdir)/bison/compile := $(curdir)/flex/compile\n$(curdir)/upx/compile := $(curdir)/ucl/compile#g' ./tools/Makefile
          ./scripts/feeds update -a
          #./scripts/feeds install -a
          ls -l

      - name: ONLY_K3
        if: env.ONLY_K3 == 'true'
        run: |
          ls -l
          #sed -i 's#define Build/append-dtb$#define Build/append-dtb\nls -l $(KDIR)/\nls -l $(DTS_DIR)/\n#g' ./lede/include/image-commands.mk
          cd lede
          sed -i 's/TARGET_DEVICES/#TARGET_DEVICES/g' ./target/linux/bcm53xx/image/Makefile
          sed -i 's/#TARGET_DEVICES += phicomm_k3/TARGET_DEVICES += phicomm_k3/g' ./target/linux/bcm53xx/image/Makefile

      - name: Generate configuration file
        run: |
          ls -l
          #sed -i 's#define Build/append-dtb$#define Build/append-dtb\nls -l $(KDIR)/\nls -l $(DTS_DIR)/\n#g' ./lede/include/image-commands.mk
          cd lede
         
          rm -f ./.config*
          cp -rf ../zmjjcg package/
          ./scripts/feeds install -a
          cp ../config-k3 ./.config
          cp ../vermagic ./vermagic
          sed -i 's#grep.*vermagic.*#cp $(TOPDIR)/vermagic $(LINUX_DIR)/.vermagic#g' ./include/kernel-defaults.mk 
          sed -i 's#Package/k3screenctrl#Package/k3screenctrll#g' ./package/zmjjcg/k3screenctrl_build/Makefile
          sed -i 's#BuildPackage,k3screenctrl#BuildPackage,k3screenctrll#g' ./package/zmjjcg/k3screenctrl_build/Makefile
          sed -i 's#DEPENDS:=+k3screenctrl#DEPENDS:=+k3screenctrll#g' ./package/zmjjcg/luci-app-k3screenctrl/Makefile

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:

          

          # 
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
          cat ./.config |grep sfe
          cat ./.config |grep shortcut

      - name: SSH connection to Actions
        uses: mxschmitt/action-tmate@v3
        if: env.SSH_ACTIONS == 'true' || contains(github.event.action, 'ssh')

      - name: Make download
        run: |
          ls -l
          cd lede
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          ls -l
          cd lede
          echo "make -j$(nproc) || make -j1 V=s"
          make -j4 || make -j1 V=s
          #make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          #du -h /mnt/openwrt/ --max-depth=1 || true
          # ls -l /home/runner/work/lede-k3/lede-k3/lede/build_dir/target-arm_cortex-a9_musl_eabi/linux-bcm53xx_generic/
          cp .config bin/
          tar -czf $FILETARNAME bin

      - name: Prepare artifact
        if: env.UPLOAD_ARTIFACT == 'true' || contains(github.event.action, 'ssh')
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./lede/bin/targets/ -type d -name "packages")
          cp -rf $(find ./lede/bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./lede/bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./lede/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACT == 'true' || contains(github.event.action, 'ssh')
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACT == 'true' || contains(github.event.action, 'ssh')
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        if: env.UPLOAD_ARTIFACT == 'true' || contains(github.event.action, 'ssh')
        with:
          name: OpenWrt_firmware
          path: ./lede/bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true


#    - name: Test 
#      run: go test -v .
      - name: Upload firmware to cowtransfer
        if: env.UPLOAD_COWTRANSFER == 'true' || contains(github.event.action, 'ssh')
        run: |
          ls -l
          cd lede
          curl -fsSL git.io/file-transfer | sh
          ./transfer cow --block 2621440 -s -p 64 --no-progress $FILETARNAME 2>&1 | tee cowtransfer.log
          echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
      - name: Upload firmware to WeTransfer
        if: env.UPLOAD_WETRANSFER == 'true' || contains(github.event.action, 'ssh')
        run: |
          ls -l
          cd lede
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress $FILETARNAME 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
